---
import { getLangFromUrl, useTranslations } from "@/i18n/utils";
import { languages } from "@/i18n/ui";
import "./nav.css";

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
---

<nav id="nav" class="nav">
  <a href="#about">{t("about.title")}</a>

  <a href="#projects">{t("projects.title")}</a>

  <a href="#contact">{t("contact.title")}</a>

  <div class="lang-container">
    <button id="langSelect">
      <span class={`fi fi-${languages[lang].flagCode}`}></span>
      {languages[lang].name}

      <span class="caret"></span>
    </button>

    <ul id="langOptions" hidden>
      {
        Object.entries(languages)
          .filter(([langKey]) => langKey !== lang)
          .map(([langKey, { name, flagCode }]) => (
            <li>
              <a href={`/${langKey}/`} class={langKey === lang ? "active" : ""}>
                <span class={`fi fi-${flagCode}`} /> {name}
              </a>
            </li>
          ))
      }
    </ul>
  </div>
</nav>

<script>
  import { animate, circInOut } from "motion";
  import { closeNavIcon, showNavIcon } from "@/assets/icons/icons";
  import { caretDownIcon, caretUpIcon } from "@/assets/icons/icons";

  const scrollableContainer = document.getElementById("scrollable-container");
  const nav = document.getElementById("nav");
  const navBtn = document.getElementById("nav-btn");
  const langSelect = document.getElementById("langSelect");
  const langOptions = document.getElementById("langOptions");
  const caret = document.querySelector(".caret")

  function showNav() {
    nav?.classList.remove("hidden");
    if (navBtn) navBtn.innerHTML = closeNavIcon;
  }

  function hideNav() {
    nav?.classList.add("hidden");
    if (navBtn) navBtn.innerHTML = showNavIcon;
  }

  document.addEventListener("DOMContentLoaded", () => {
    function handleResizeNav() {
      if (matchMedia("(max-width: 768px)").matches) {
        hideNav();
        if (navBtn) navBtn.style.display = "block";
      } else {
        showNav();
        if (navBtn) navBtn.style.display = "none";
      }
    }

    handleResizeNav();

    window.addEventListener("resize", handleResizeNav);

    if (caret) caret.innerHTML = caretDownIcon
  });

  function handleClickNav() {
    const isHidden = nav?.classList.contains("hidden");

    if (!isHidden) {
      hideNav();
    } else {
      showNav();
    }
  }

  navBtn?.addEventListener("click", handleClickNav);

  langSelect?.addEventListener("click", () => {
    const isHidden = langOptions?.hasAttribute("hidden")

    if (!isHidden) {
      if (caret) caret.innerHTML = caretDownIcon;
    } else {
      if (caret) caret.innerHTML = caretUpIcon;
    }

    langOptions?.toggleAttribute("hidden");
  });

  animate(
    ".nav",
    { y: [-100, 0], filter: ["blur(5px)", "blur(0px)"] },
    { ease: circInOut, duration: 1 },
  );

  if (scrollableContainer) {
    scrollableContainer.addEventListener("scroll", () => {
      const scrollPosition = scrollableContainer.scrollTop;

      if (scrollPosition > 400) {
        animate(
          ".nav",
          {
            backgroundColor: matchMedia("(max-width: 768px)").matches
              ? "none"
              : "var(--glass-color-100)",
          },
          { duration: 0.3 },
        );

        animate(
          "#header-container",
          {
            backgroundColor: matchMedia("(max-width: 768px)").matches
              ? "var(--glass-color-100)"
              : "none",
          },
          { duration: 0.3 },
        );
      } else {
        animate(
          ".nav",
          {
            backgroundColor: matchMedia("(max-width: 768px)").matches
              ? "none"
              : "var(--glass-color-900)",
          },
          { duration: 0.3 },
        );

        animate(
          "#header-container",
          {
            backgroundColor: matchMedia("(max-width: 768px)").matches
              ? "var(--glass-color-900)"
              : "none",
          },
          { duration: 0.3 },
        );
      }
    });
  }
</script>
